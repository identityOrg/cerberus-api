// Package client provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ClientDetails defines model for ClientDetails.
type ClientDetails struct {

	// Client ID
	ClientId *string `json:"client_id,omitempty"`

	// A description of the client
	Description *string `json:"description,omitempty"`

	// Client name
	Name *string `json:"name,omitempty"`
}

// ClientSummary defines model for ClientSummary.
type ClientSummary struct {
	ClientId *string `json:"client_id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Public   *bool   `json:"public,omitempty"`
}

// ClientSummaryPage defines model for ClientSummaryPage.
type ClientSummaryPage struct {
	Clients *[]ClientSummary `json:"clients,omitempty"`
	Size    *int32           `json:"size,omitempty"`
	Start   *int32           `json:"start,omitempty"`
	Total   *int32           `json:"total,omitempty"`
}

// CreateClientJSONBody defines parameters for CreateClient.
type CreateClientJSONBody ClientDetails

// CreateClientRequestBody defines body for CreateClient for application/json ContentType.
type CreateClientJSONRequestBody CreateClientJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List All Clients
	// (GET /v1/api/client)
	ListAll(ctx echo.Context) error
	// Fetch client details
	// (GET /v1/api/client/{client_id})
	ClientDetail(ctx echo.Context, clientId string) error
	// Create a new Client
	// (PUT /v1/api/client/{client_id})
	CreateClient(ctx echo.Context, clientId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAll converts echo context to params.
func (w *ServerInterfaceWrapper) ListAll(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAll(ctx)
	return err
}

// ClientDetail converts echo context to params.
func (w *ServerInterfaceWrapper) ClientDetail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "client_id" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "client_id", ctx.Param("client_id"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClientDetail(ctx, clientId)
	return err
}

// CreateClient converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "client_id" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "client_id", ctx.Param("client_id"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateClient(ctx, clientId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/api/client", wrapper.ListAll)
	router.GET("/v1/api/client/:client_id", wrapper.ClientDetail)
	router.PUT("/v1/api/client/:client_id", wrapper.CreateClient)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWX2/jNgz/KgK3Ry9JW+C281vXbkOBPRTt3obDoMh0rM6WVJFOLwvy3QdLih3Hya29",
	"DsOe4lgkzd8fStqCso2zBg0T5FsgVWEjw+NNrdHwLbLUdXhRICmvHWtrIIdrUYQloUKc8Og8EhqWISAD",
	"/CwbV2OXGUP+0AXkQLZBwfiZITuqeLhiZIOjV7sMnLcOPWuko5rHrcXOxd0tZMAbFwqx12bVVRmFngLV",
	"/xe2FFxhAniqVuzyzOfD4iRp17+xyydUAVhMeGybRvrNqaYoLomYIkrrh6bO0Fw9P1VL9VS9oBro/CnG",
	"ipt9smuXtVaQl7Im/DLFZ8FPFvZF+6WltTVKE8Fr7pqFB2tZ/LZxGNCMGfgniu7lCk/R5OQKO9GSI6kv",
	"N+GIIP/9vC0n5hswsW9xl3196qcMSP+FkH+4zIBYeob86mMGbFnWkF8szogQHjVjEx6+9VhCDt/Mh+Gd",
	"p8mdj6kc7Ca9l+F//P4WSusbyZCDNnx1OZCuDeMKfQiNDb4qNiF4RezrXBBEnjihS9amtCfkv78Tjw6V",
	"LrUKW1AsiX6JvqVUW1gvHtGvtUJx7+1aF+hhaEel6O/66Vqjp1j/YraYLTqg1qGRTkMOV7PFrAPoJFdB",
	"l/n6Yi6dnqf0fAsrDD+doKGpu84wv2ri67qGDDySs4ai0peLRRDcGk7Z0rk6oZk/Udywkpfjbt0qhRQe",
	"17Ju/1cG//6H3j8Xl709Pn4IEkazvsnKwQ8heaz7Y+RAPCQqg7/2ox+5Ftd1nQxAYXms03zbg9194Zzz",
	"SLb1CsfbbxJ4nPMzsqpSHoV4mTJm4tYiGRbaqLot8OCAEYTKIwtcoxH68OgRlSRhDc4gO3LS4Rn9fjtN",
	"qJz66n1n+Ful318+3i57VCDRV+zLdKPqZYOMPg7ImXuDYCskkVVaMvY6vmiuoNt+IA8jP0AcuOk0eG61",
	"xyLOwyHe45vAp250TrjnxmP3WSkMvuwhtKTNStCGGBtRYCnbmoUkUcq6Xkr1pwg6zcQDPrdIvL8paBIt",
	"YdHhsWv0XifHjQud8FVoob8m+Fj1R1tsXmGpf0nhpEYhWU5o3X2V1/8b643kSxSOAn5Bnjhzt/s7AAD/",
	"/2mYVEWKCwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
