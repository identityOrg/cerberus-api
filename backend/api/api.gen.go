// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ChangePasswordRequest defines model for ChangePasswordRequest.
type ChangePasswordRequest struct {

	// The new password to set.
	NewPassword string `json:"new_password"`

	// The old or existing password
	OldPassword string `json:"old_password"`
}

// Claim defines model for Claim.
type Claim struct {

	// A short dercription about the claim.
	Description *string `json:"description,omitempty"`

	// Internal identifier of the claim
	Id int `json:"id"`

	// A alphanumeric name, to represent claim name in OAuth2 claim.
	Name string `json:"name"`
}

// ClaimPage defines model for ClaimPage.
type ClaimPage struct {
	// Embedded fields due to inline allOf schema

	// an array of claims
	Claims []Claim `json:"claims"`
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page
}

// Client defines model for Client.
type Client map[string]interface{}

// ClientCredentials defines model for ClientCredentials.
type ClientCredentials struct {

	// Client identifier
	ClientId string `json:"client_id"`

	// Client secret
	ClientSecret string `json:"client_secret"`
}

// ClientSummary defines model for ClientSummary.
type ClientSummary struct {

	// Client Id
	ClientId *string `json:"client_id,omitempty"`

	// Client name
	Name *string `json:"name,omitempty"`

	// Is it a public client
	Public *bool `json:"public,omitempty"`
}

// ClientSummaryPage defines model for ClientSummaryPage.
type ClientSummaryPage struct {
	// Embedded fields due to inline allOf schema

	// A page of clients as queried with query parameter
	Clients *[]ClientSummary `json:"clients,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page
}

// Error defines model for Error.
type Error struct {

	// Detail description
	Description *string `json:"description,omitempty"`

	// Error code
	Error *string `json:"error,omitempty"`
}

// Page defines model for Page.
type Page struct {

	// Page number of the response chunk
	PageNumber *int32 `json:"page_number,omitempty"`

	// Total available pages
	PageTotal *int32 `json:"page_total,omitempty"`
}

// Scope defines model for Scope.
type Scope struct {

	// A short dercription about the scope.
	Description *string `json:"description,omitempty"`

	// Internal identifier of the scope
	Id int `json:"id"`

	// Scope name. alphanumeric characters only.
	Name string `json:"name"`
}

// User defines model for User.
type User struct {
	// Embedded fields due to inline allOf schema

	// End-User's preferred postal address. The value of the address member is a JSON [RFC4627] structure containing some or all of the members defined in Section 5.1.1.
	Address *UserAddress `json:"address,omitempty"`

	// End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
	Birthdate *openapi_types.Date `json:"birthdate,omitempty"`

	// End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
	Gender *string `json:"gender,omitempty"`

	// End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
	Locale *string `json:"locale,omitempty"`

	// Username for login
	Username string `json:"username"`

	// String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.
	Zoneinfo *string `json:"zoneinfo,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/UserName)
	UserName
	// Embedded struct due to allOf(#/components/schemas/UserProfile)
	UserProfile
	// Embedded struct due to allOf(#/components/schemas/UserContact)
	UserContact
	// Embedded struct due to allOf(#/components/schemas/UserAddress)
	UserAddress
}

// UserAddress defines model for UserAddress.
type UserAddress struct {

	// Country name component.
	Country *string `json:"country,omitempty"`

	// Full mailing address, formatted for display or use on a mailing label. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair ("\r\n") or as a single line feed character ("\n").
	Formatted *string `json:"formatted,omitempty"`

	// City or locality component.
	Locality *string `json:"locality,omitempty"`

	// Zip code or postal code component.
	PostalCode *string `json:"postal_code,omitempty"`

	// State, province, prefecture, or region component.
	Region *string `json:"region,omitempty"`

	// Full street address component, which MAY include house number, street name, Post Office Box, and multi-line extended street address information. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair ("\r\n") or as a single line feed character ("\n").
	StreetAddress *string `json:"street_address,omitempty"`
}

// UserContact defines model for UserContact.
type UserContact struct {

	// End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
	Email *string `json:"email,omitempty"`

	// True if the End-User's e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
	EmailVerified *bool `json:"email_verified,omitempty"`

	// End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
	PhoneNumber *string `json:"phone_number,omitempty"`

	// User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
	PhoneNumberVerified *bool `json:"phone_number_verified,omitempty"`
}

// UserName defines model for UserName.
type UserName struct {

	// Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
	FamilyName *string `json:"family_name,omitempty"`

	// Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
	GivenName *string `json:"given_name,omitempty"`

	// Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
	MiddleName *string `json:"middle_name,omitempty"`

	// End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
	Name *string `json:"name,omitempty"`

	// Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
	Nickname *string `json:"nickname,omitempty"`

	// Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace. The RP MUST NOT rely upon this value being unique.
	PreferredUsername *string `json:"preferred_username,omitempty"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {

	// URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
	Picture *string `json:"picture,omitempty"`

	// URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
	Profile *string `json:"profile,omitempty"`

	// URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
	Website *string `json:"website,omitempty"`
}

// UserRecoverPassword defines model for UserRecoverPassword.
type UserRecoverPassword struct {

	// Email id of the user to confirm with user store
	Email string `json:"email"`

	// Username of the user
	Username string `json:"username"`
}

// UserResetPassword defines model for UserResetPassword.
type UserResetPassword struct {

	// One time password received through initiation process
	Otp string `json:"otp"`

	// Username of the user
	Username string `json:"username"`
}

// UserStatusUpdate defines model for UserStatusUpdate.
type UserStatusUpdate struct {

	// New status to change to.
	Active bool `json:"active"`
}

// UserSummary defines model for UserSummary.
type UserSummary struct {

	// User is active or inactive
	Active *bool `json:"active,omitempty"`

	// User is blocked by invalid attempt
	Blocked *bool `json:"blocked,omitempty"`

	// Email address
	Email *string `json:"email,omitempty"`

	// Login username
	Username *string `json:"username,omitempty"`
}

// UserSummaryPage defines model for UserSummaryPage.
type UserSummaryPage struct {
	// Embedded fields due to inline allOf schema

	// A collection of users
	Users []UserSummary `json:"users"`
	// Embedded struct due to allOf(#/components/schemas/Page)
	Page
}

// UnAuthorized defines model for UnAuthorized.
type UnAuthorized Error

// GetClaimsParams defines parameters for GetClaims.
type GetClaimsParams struct {

	// Number of items in each page.
	// Default value is 10.
	PageSize *int `json:"page_size,omitempty"`

	// Page number to return in response.
	// Starts with 1 and default value is 1 too.
	PageNumber *int `json:"page_number,omitempty"`
}

// CreateClaimJSONBody defines parameters for CreateClaim.
type CreateClaimJSONBody Claim

// UpdateClaimJSONBody defines parameters for UpdateClaim.
type UpdateClaimJSONBody Claim

// GetClientsParams defines parameters for GetClients.
type GetClientsParams struct {

	// Number of items in each page.
	// Default value is 10.
	PageSize *int `json:"page_size,omitempty"`

	// Page number to return in response.
	// Starts with 1 and default value is 1 too.
	PageNumber *int `json:"page_number,omitempty"`
}

// CreateClientJSONBody defines parameters for CreateClient.
type CreateClientJSONBody Client

// UpdateClientJSONBody defines parameters for UpdateClient.
type UpdateClientJSONBody Client

// GetScopesParams defines parameters for GetScopes.
type GetScopesParams struct {

	// Number of items in each page.
	// Default value is 10.
	PageSize *int `json:"page_size,omitempty"`

	// Page number to return in response.
	// Starts with 1 and default value is 1 too.
	PageNumber *int `json:"page_number,omitempty"`
}

// CreateScopeJSONBody defines parameters for CreateScope.
type CreateScopeJSONBody Scope

// UpdateScopeJSONBody defines parameters for UpdateScope.
type UpdateScopeJSONBody Scope

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {

	// Number of items in each page.
	// Default value is 10.
	PageSize *int `json:"page_size,omitempty"`

	// Page number to return in response.
	// Starts with 1 and default value is 1 too.
	PageNumber *int `json:"page_number,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody User

// InitiatePasswordRecoveryJSONBody defines parameters for InitiatePasswordRecovery.
type InitiatePasswordRecoveryJSONBody UserRecoverPassword

// ResetUserPasswordJSONBody defines parameters for ResetUserPassword.
type ResetUserPasswordJSONBody UserResetPassword

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody User

// ChangeUserPasswordJSONBody defines parameters for ChangeUserPassword.
type ChangeUserPasswordJSONBody ChangePasswordRequest

// UpdateUserStatusJSONBody defines parameters for UpdateUserStatus.
type UpdateUserStatusJSONBody UserStatusUpdate

// CreateClaimRequestBody defines body for CreateClaim for application/json ContentType.
type CreateClaimJSONRequestBody CreateClaimJSONBody

// UpdateClaimRequestBody defines body for UpdateClaim for application/json ContentType.
type UpdateClaimJSONRequestBody UpdateClaimJSONBody

// CreateClientRequestBody defines body for CreateClient for application/json ContentType.
type CreateClientJSONRequestBody CreateClientJSONBody

// UpdateClientRequestBody defines body for UpdateClient for application/json ContentType.
type UpdateClientJSONRequestBody UpdateClientJSONBody

// CreateScopeRequestBody defines body for CreateScope for application/json ContentType.
type CreateScopeJSONRequestBody CreateScopeJSONBody

// UpdateScopeRequestBody defines body for UpdateScope for application/json ContentType.
type UpdateScopeJSONRequestBody UpdateScopeJSONBody

// CreateUserRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// InitiatePasswordRecoveryRequestBody defines body for InitiatePasswordRecovery for application/json ContentType.
type InitiatePasswordRecoveryJSONRequestBody InitiatePasswordRecoveryJSONBody

// ResetUserPasswordRequestBody defines body for ResetUserPassword for application/json ContentType.
type ResetUserPasswordJSONRequestBody ResetUserPasswordJSONBody

// UpdateUserRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// ChangeUserPasswordRequestBody defines body for ChangeUserPassword for application/json ContentType.
type ChangeUserPasswordJSONRequestBody ChangeUserPasswordJSONBody

// UpdateUserStatusRequestBody defines body for UpdateUserStatus for application/json ContentType.
type UpdateUserStatusJSONRequestBody UpdateUserStatusJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List All claims
	// (GET /v1/api/claims)
	GetClaims(ctx echo.Context, params GetClaimsParams) error
	// Create a Claim
	// (POST /v1/api/claims)
	CreateClaim(ctx echo.Context) error
	// Delete a Claim
	// (DELETE /v1/api/claims/{id})
	DeleteClaim(ctx echo.Context, id string) error
	// Get a Claim
	// (GET /v1/api/claims/{id})
	GetClaim(ctx echo.Context, id string) error
	// Update a Claim
	// (PUT /v1/api/claims/{id})
	UpdateClaim(ctx echo.Context, id string) error
	// List All clients
	// (GET /v1/api/clients)
	GetClients(ctx echo.Context, params GetClientsParams) error
	// Create a Client
	// (POST /v1/api/clients)
	CreateClient(ctx echo.Context) error
	// Delete a Client
	// (DELETE /v1/api/clients/{id})
	DeleteClient(ctx echo.Context, id string) error
	// Get a Client
	// (GET /v1/api/clients/{id})
	GetClient(ctx echo.Context, id string) error
	// Update a Client
	// (PUT /v1/api/clients/{id})
	UpdateClient(ctx echo.Context, id string) error
	// Update a Client
	// (PUT /v1/api/clients/{id}/generate)
	GenerateSecret(ctx echo.Context, id string) error
	// List All scopes
	// (GET /v1/api/scopes)
	GetScopes(ctx echo.Context, params GetScopesParams) error
	// Create a Scope
	// (POST /v1/api/scopes)
	CreateScope(ctx echo.Context) error
	// Delete a Scope
	// (DELETE /v1/api/scopes/{id})
	DeleteScope(ctx echo.Context, id string) error
	// Get a Scope
	// (GET /v1/api/scopes/{id})
	GetScope(ctx echo.Context, id string) error
	// Update a Scope
	// (PUT /v1/api/scopes/{id})
	UpdateScope(ctx echo.Context, id string) error
	// List All users
	// (GET /v1/api/users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Create a User
	// (POST /v1/api/users)
	CreateUser(ctx echo.Context) error
	// Initiate Password Recovery
	// (POST /v1/api/users/recover/password)
	InitiatePasswordRecovery(ctx echo.Context) error
	// Reset password, after recovery
	// (PUT /v1/api/users/recover/password)
	ResetUserPassword(ctx echo.Context) error
	// Delete a User
	// (DELETE /v1/api/users/{id})
	DeleteUser(ctx echo.Context, id string) error
	// Get a User
	// (GET /v1/api/users/{id})
	GetUser(ctx echo.Context, id string) error
	// Update a User
	// (PUT /v1/api/users/{id})
	UpdateUser(ctx echo.Context, id string) error
	// Change Password
	// (POST /v1/api/users/{id}/password)
	ChangeUserPassword(ctx echo.Context, id int) error
	// Update status
	// (POST /v1/api/users/{id}/status)
	UpdateUserStatus(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetClaims converts echo context to params.
func (w *ServerInterfaceWrapper) GetClaims(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClaimsParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_number", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClaims(ctx, params)
	return err
}

// CreateClaim converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClaim(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateClaim(ctx)
	return err
}

// DeleteClaim converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClaim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteClaim(ctx, id)
	return err
}

// GetClaim converts echo context to params.
func (w *ServerInterfaceWrapper) GetClaim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClaim(ctx, id)
	return err
}

// UpdateClaim converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClaim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateClaim(ctx, id)
	return err
}

// GetClients converts echo context to params.
func (w *ServerInterfaceWrapper) GetClients(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClientsParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_number", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClients(ctx, params)
	return err
}

// CreateClient converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClient(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateClient(ctx)
	return err
}

// DeleteClient converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteClient(ctx, id)
	return err
}

// GetClient converts echo context to params.
func (w *ServerInterfaceWrapper) GetClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClient(ctx, id)
	return err
}

// UpdateClient converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateClient(ctx, id)
	return err
}

// GenerateSecret converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateSecret(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateSecret(ctx, id)
	return err
}

// GetScopes converts echo context to params.
func (w *ServerInterfaceWrapper) GetScopes(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScopesParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_number", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScopes(ctx, params)
	return err
}

// CreateScope converts echo context to params.
func (w *ServerInterfaceWrapper) CreateScope(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateScope(ctx)
	return err
}

// DeleteScope converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScope(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteScope(ctx, id)
	return err
}

// GetScope converts echo context to params.
func (w *ServerInterfaceWrapper) GetScope(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetScope(ctx, id)
	return err
}

// UpdateScope converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateScope(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateScope(ctx, id)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_number", ctx.QueryParams(), &params.PageNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// InitiatePasswordRecovery converts echo context to params.
func (w *ServerInterfaceWrapper) InitiatePasswordRecovery(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InitiatePasswordRecovery(ctx)
	return err
}

// ResetUserPassword converts echo context to params.
func (w *ServerInterfaceWrapper) ResetUserPassword(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResetUserPassword(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// ChangeUserPassword converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeUserPassword(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeUserPassword(ctx, id)
	return err
}

// UpdateUserStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("OAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUserStatus(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/api/claims", wrapper.GetClaims)
	router.POST("/v1/api/claims", wrapper.CreateClaim)
	router.DELETE("/v1/api/claims/:id", wrapper.DeleteClaim)
	router.GET("/v1/api/claims/:id", wrapper.GetClaim)
	router.PUT("/v1/api/claims/:id", wrapper.UpdateClaim)
	router.GET("/v1/api/clients", wrapper.GetClients)
	router.POST("/v1/api/clients", wrapper.CreateClient)
	router.DELETE("/v1/api/clients/:id", wrapper.DeleteClient)
	router.GET("/v1/api/clients/:id", wrapper.GetClient)
	router.PUT("/v1/api/clients/:id", wrapper.UpdateClient)
	router.PUT("/v1/api/clients/:id/generate", wrapper.GenerateSecret)
	router.GET("/v1/api/scopes", wrapper.GetScopes)
	router.POST("/v1/api/scopes", wrapper.CreateScope)
	router.DELETE("/v1/api/scopes/:id", wrapper.DeleteScope)
	router.GET("/v1/api/scopes/:id", wrapper.GetScope)
	router.PUT("/v1/api/scopes/:id", wrapper.UpdateScope)
	router.GET("/v1/api/users", wrapper.GetUsers)
	router.POST("/v1/api/users", wrapper.CreateUser)
	router.POST("/v1/api/users/recover/password", wrapper.InitiatePasswordRecovery)
	router.PUT("/v1/api/users/recover/password", wrapper.ResetUserPassword)
	router.DELETE("/v1/api/users/:id", wrapper.DeleteUser)
	router.GET("/v1/api/users/:id", wrapper.GetUser)
	router.PUT("/v1/api/users/:id", wrapper.UpdateUser)
	router.POST("/v1/api/users/:id/password", wrapper.ChangeUserPassword)
	router.POST("/v1/api/users/:id/status", wrapper.UpdateUserStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"KWkAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
